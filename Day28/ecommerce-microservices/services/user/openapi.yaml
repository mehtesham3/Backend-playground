openapi: 3.1.0
info:
  title: User Service API
  version: 1.0.0
  description: API documentation for the User Service in the e-commerce microservices architecture.

servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
   BearerAuth:
     type: http
     scheme: bearer
     bearerFormat: JWT

  schemas:
   User:
      type: object
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        username:
          type: string
          example: johndoe
        email:
          type: string
          example: john@example.com
        role:
         type: string
         enum: [user, admin]
         example: user

   SignupRequest:
     type: object
     required: [name,email,password]
     properties:
      name: 
       type: string
       example: john
      email:
       type: string
       format: email
       example: john@example.com
      password:
        type: string
        format: password
        example: strongpassword123
      role:
        type: string
        enum: [user, admin]
        example: user
     
   LoginRequest:
        type: object
        required: [email,password]
        properties:
          email: 
             type: string
             format: email
             example: john@example.com
          password:
             type: string
             example: strongpassword123
   ProfileResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "User profile fetched successfully"
        user:
          $ref: '#/components/schemas/User'

   ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error message"

   ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Validation error message"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
paths:
  /:
    get:
      summary: Health check
      description: check if server is running
      responses:
        200:
          description: Server is running
          content:
            text/plain:
              schema:
                type: string
                example: User Service is running well

  /db-test:
    get:
      summary: Database test
      description: Check database connection
      responses:
        200:
          description: Database connected
          content:
             application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Database is connected
                  time:
                    type: string
                    format: date-time
  /signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
            example:
              name: John Doe
              email: john@example.com
              password: password123
              role: user
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupRequest'
              example:
                success: true
                message: User created successfully
                user:
                  id: 1
                  name: John Doe
                  email: john@example.com
                  role: user
        400:
          description: Bad request (e.g., validation errors)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                success: false
                message: "Invalid input data"
        409:
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Email already exist
      500:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Internal server error
  /login:
    post:
      summary: User login
      description: Authenticate user and receive JWT token. Rate limited to 5 attempts per minute.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: john@example.com
              password: password123
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                message: User login successfully
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Invalid Credentials
        429:
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Too many login attempts, try again after a minute.
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /profile:
    get:
      summary: Get user profile
      description: Get authenticated user's profile information. Requires JWT token.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
              example:
                success: true
                message: User profile fetched successfully
                user:
                  id: 1
                  name: John Doe
                  email: john@example.com
                  role: user
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Token is required
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'