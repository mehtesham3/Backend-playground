openapi: 3.0.0
info:
  title: ECommerce API
  version: 1.0.0
  description: Complete ecommerce platform with authentication, products, cart, orders, and order management
  contact:
    name: API Support
    email: support@ecommerce.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server

tags:
  - name: General
    description: Basic API endpoints
  - name: Authentication
    description: User authentication and profile management
  - name: Products
    description: Product management (Admin only for create, update, delete)
  - name: Cart
    description: Shopping cart management
  - name: Orders
    description: Order management and tracking
  - name: OrderItems
    description: Order items management and details

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # User Schemas
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        role:
          type: string
          enum: [user, admin]
          example: user

    SignupRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
          minLength: 2
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          minLength: 6
          example: password123
        role:
          type: string
          enum: [user, admin]
          default: user
          example: user

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: password123

    # Product Schemas
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: iPhone 15 Pro
        description:
          type: string
          example: Latest Apple smartphone with advanced features
        price:
          type: number
          format: float
          example: 999.99
        stock:
          type: integer
          example: 50
        category_id:
          type: integer
          example: 1
        brand_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProductRequest:
      type: object
      required: [name, description, price, stock, category_name, brand_name]
      properties:
        name:
          type: string
          example: iPhone 15 Pro
        description:
          type: string
          example: Latest Apple smartphone with advanced features
        price:
          type: number
          format: float
          example: 999.99
        stock:
          type: integer
          example: 50
        category_name:
          type: string
          example: Electronics
        brand_name:
          type: string
          example: Apple

    ProductUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: iPhone 15 Pro Max
        description:
          type: string
          example: Updated description
        price:
          type: number
          format: float
          example: 1099.99
        stock:
          type: integer
          example: 25
        category_name:
          type: string
          example: Mobile Phones
        brand_name:
          type: string
          example: Apple Inc.

    # Cart Schemas
    CartItemRequest:
      type: object
      required: [product_id, quantity]
      properties:
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          minimum: 1
          example: 2

    CartItemUpdateRequest:
      type: object
      required: [quantity]
      properties:
        quantity:
          type: integer
          minimum: 1
          example: 3

    CartItem:
      type: object
      properties:
        id:
          type: string
          example: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
        product_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CartItemWithProduct:
      type: object
      properties:
        id:
          type: string
          example: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
        name:
          type: string
          example: iPhone 15 Pro
        price:
          type: number
          format: float
          example: 999.99
        quantity:
          type: integer
          example: 2

    # Order Schemas
    Order:
      type: object
      properties:
        id:
          type: string
          example: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
        user_id:
          type: integer
          example: 1
        total_amount:
          type: number
          format: float
          example: 1999.98
        status:
          type: string
          enum: [pending, shipped, delivered, cancelled]
          example: pending
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: string
          example: "e8a765f8-99bd-5d20-bf65-e25b71d8974b"
        order_id:
          type: string
          example: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 999.99
        created_at:
          type: string
          format: date-time

    OrderStatusUpdate:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [pending, shipped, delivered, cancelled]
          example: shipped

    # OrderItems Schemas (NEW)
    OrderItemWithDetails:
      type: object
      properties:
        id:
          type: string
          example: "e8a765f8-99bd-5d20-bf65-e25b71d8974b"
        order_id:
          type: string
          example: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 999.99
        created_at:
          type: string
          format: date-time
        order_status:
          type: string
          example: pending
        user_email:
          type: string
          example: john@example.com
        product_name:
          type: string
          example: iPhone 15 Pro

    OrderWithItems:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/Order'
        items:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: "e8a765f8-99bd-5d20-bf65-e25b71d8974b"
              order_id:
                type: string
                example: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
              product_id:
                type: integer
                example: 1
              quantity:
                type: integer
                example: 2
              price:
                type: number
                format: float
                example: 999.99
              product_name:
                type: string
                example: iPhone 15 Pro

    # Response Schemas
    SignupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: User created successfully
        user:
          $ref: '#/components/schemas/User'

    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: User login successfully
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    ProfileResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: User profile fetched successfully
        user:
          $ref: '#/components/schemas/User'

    ProductResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Product created successfully
        product:
          $ref: '#/components/schemas/Product'

    ProductsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'

    DeleteResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Product deleted successfully

    # Cart Response Schemas
    CartItemResponse:
      type: object
      properties:
        message:
          type: string
          example: Item added to cart
        item:
          $ref: '#/components/schemas/CartItem'

    CartUpdateResponse:
      type: object
      properties:
        message:
          type: string
          example: Cart updated
        item:
          $ref: '#/components/schemas/CartItem'

    CartItemsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemWithProduct'

    CartDeleteResponse:
      type: object
      properties:
        message:
          type: string
          example: Cart item removed successfully

    # Order Response Schemas
    OrderCreateResponse:
      type: object
      properties:
        message:
          type: string
          example: Order placed successfully
        order:
          $ref: '#/components/schemas/Order'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    OrdersResponse:
      type: array
      items:
        $ref: '#/components/schemas/Order'

    OrderStatusResponse:
      type: object
      properties:
        message:
          type: string
          example: Order status updated
        order:
          type: object
          properties:
            id:
              type: string
              example: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
            status:
              type: string
              example: shipped
            updated_at:
              type: string
              format: date-time

    OrderDeleteResponse:
      type: object
      properties:
        message:
          type: string
          example: Order deleted successfully

    # OrderItems Response Schemas (NEW)
    OrderItemsResponse:
      type: array
      items:
        $ref: '#/components/schemas/OrderItemWithDetails'

    OrderItemsDeleteResponse:
      type: object
      properties:
        message:
          type: string
          example: Order item deleted successfully

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Error description
        error:
          type: string
          example: Detailed error message

    ValidationError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Validation error message

paths:
  # ==================== GENERAL ROUTES ====================
  /:
    get:
      tags: [General]
      summary: Health check
      description: Check if server is running
      responses:
        200:
          description: Server is running
          content:
            text/plain:
              schema:
                type: string
                example: ECommerce server is running well

  /db-test:
    get:
      tags: [General]
      summary: Database test
      description: Check database connection
      responses:
        200:
          description: Database connected
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Database is connected
                  time:
                    type: string
                    format: date-time

  # ==================== AUTHENTICATION ROUTES ====================
  /auth/signup:
    post:
      tags: [Authentication]
      summary: Register new user
      description: Create a new user account with email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
            example:
              name: John Doe
              email: john@example.com
              password: password123
              role: user
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
              example:
                success: true
                message: User created successfully
                user:
                  id: 1
                  name: John Doe
                  email: john@example.com
                  role: user
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                success: false
                message: "Email must be a valid email"
        409:
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Email already exist
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Internal server error

  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user and receive JWT token. Rate limited to 5 attempts per minute.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              email: john@example.com
              password: password123
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                message: User login successfully
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Invalid Credentials
        429:
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Too many login attempts, try again after a minute.
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/profile:
    get:
      tags: [Authentication]
      summary: Get user profile
      description: Get authenticated user's profile information. Requires JWT token.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
              example:
                success: true
                message: User profile fetched successfully
                user:
                  id: 1
                  name: John Doe
                  email: john@example.com
                  role: user
        401:
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Token is required
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== PRODUCT ROUTES ====================
  /products:
    post:
      tags: [Products]
      summary: Create new product
      description: Create a new product. **Admin only**. Automatically creates category and brand if they don't exist.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
            example:
              name: iPhone 15 Pro
              description: Latest Apple smartphone with advanced features
              price: 999.99
              stock: 50
              category_name: Electronics
              brand_name: Apple
      responses:
        201:
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
              example:
                success: true
                message: Product created successfully
                product:
                  id: 1
                  name: iPhone 15 Pro
                  description: Latest Apple smartphone with advanced features
                  price: 999.99
                  stock: 50
                  category_id: 1
                  brand_id: 1
                  created_at: "2023-10-26T10:30:00.000Z"
                  updated_at: "2023-10-26T10:30:00.000Z"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
              example:
                success: false
                message: "Name is required"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Admin access required
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [Products]
      summary: Get all products
      description: Retrieve all products. **Public endpoint** - no authentication required.
      responses:
        200:
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsResponse'
              example:
                success: true
                products:
                  - id: 1
                    name: iPhone 15 Pro
                    description: Latest Apple smartphone
                    price: 999.99
                    stock: 50
                    category_id: 1
                    brand_id: 1
                    created_at: "2023-10-26T10:30:00.000Z"
                    updated_at: "2023-10-26T10:30:00.000Z"
                  - id: 2
                    name: Samsung Galaxy S23
                    description: Android flagship phone
                    price: 899.99
                    stock: 30
                    category_id: 1
                    brand_id: 2
                    created_at: "2023-10-26T10:30:00.000Z"
                    updated_at: "2023-10-26T10:30:00.000Z"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    patch:
      tags: [Products]
      summary: Update product
      description: Update product details. **Admin only**. Partially update specific fields.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateRequest'
            example:
              name: iPhone 15 Pro Max
              price: 1099.99
              stock: 25
      responses:
        200:
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
              example:
                success: true
                product:
                  id: 1
                  name: iPhone 15 Pro Max
                  description: Latest Apple smartphone with advanced features
                  price: 1099.99
                  stock: 25
                  category_id: 1
                  brand_id: 1
                  created_at: "2023-10-26T10:30:00.000Z"
                  updated_at: "2023-10-26T10:30:00.000Z"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Product not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags: [Products]
      summary: Delete product
      description: Delete a product. **Admin only**.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Product ID
      responses:
        200:
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
              example:
                success: true
                message: Product deleted successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: Product not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== CART ROUTES ====================
  /cart/items:
    post:
      tags: [Cart]
      summary: Add item to cart
      description: Add a product to the user's cart. If item already exists, quantity is updated.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemRequest'
            example:
              product_id: 1
              quantity: 2
      responses:
        201:
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemResponse'
              example:
                message: Item added to cart
                item:
                  id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                  product_id: 1
                  user_id: 1
                  quantity: 2
                  created_at: "2023-10-26T10:30:00.000Z"
                  updated_at: "2023-10-26T10:30:00.000Z"
        200:
          description: Cart item quantity updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartUpdateResponse'
              example:
                message: Cart updated
                item:
                  id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                  product_id: 1
                  user_id: 1
                  quantity: 3
                  created_at: "2023-10-26T10:30:00.000Z"
                  updated_at: "2023-10-26T10:30:00.000Z"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to add item to cart
  /cart:
    get:
      tags: [Cart]
      summary: Get cart items
      description: Retrieve all items in the authenticated user's cart with product details.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Cart items retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemsResponse'
              example:
                items:
                  - id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                    name: iPhone 15 Pro
                    price: 999.99
                    quantity: 2
                  - id: "a8c765e8-88bd-4e12-af63-d25a98765432"
                    name: Samsung Galaxy S23
                    price: 899.99
                    quantity: 1
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to fetch cart

  /cart/items/{itemId}:
    patch:
      tags: [Cart]
      summary: Update cart item quantity
      description: Update the quantity of a specific item in the cart.
      security:
        - BearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: Cart item ID (UUID format)
          example: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemUpdateRequest'
            example:
              quantity: 3
      responses:
        200:
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartUpdateResponse'
              example:
                message: Cart item updated
                item:
                  id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                  product_id: 1
                  user_id: 1
                  quantity: 3
                  created_at: "2023-10-26T10:30:00.000Z"
                  updated_at: "2023-10-26T10:30:00.000Z"
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Cart item not found or unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Cart item not found or unauthorized
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to update cart item

    delete:
      tags: [Cart]
      summary: Remove item from cart
      description: Remove a specific item from the cart.
      security:
        - BearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: Cart item ID (UUID format)
          example: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
      responses:
        200:
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDeleteResponse'
              example:
                message: Cart item removed successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Cart item not found or unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Cart item not found or unauthorized
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to remove cart item

  # ==================== ORDER ROUTES ====================
  /orders:
    post:
      tags: [Orders]
      summary: Create order from cart
      description: Create an order from cart items. Clears the user's cart after successful order creation.
      security:
        - BearerAuth: []
      responses:
        201:
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCreateResponse'
              example:
                message: Order placed successfully
                order:
                  id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                  user_id: 1
                  total_amount: 1999.98
                  status: pending
                  created_at: "2023-10-26T10:30:00.000Z"
                  updated_at: "2023-10-26T10:30:00.000Z"
                items:
                  - order_id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                    product_id: 1
                    quantity: 2
                    price: 999.99
                  - order_id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                    product_id: 2
                    quantity: 1
                    price: 899.99
        400:
          description: Cart is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Cart is empty
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to place order

    get:
      tags: [Orders]
      summary: Get user orders
      description: Retrieve all orders for the authenticated user.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersResponse'
              example:
                - id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                  user_id: 1
                  total_amount: 1999.98
                  status: pending
                  created_at: "2023-10-26T10:30:00.000Z"
                  updated_at: "2023-10-26T10:30:00.000Z"
                - id: "a8c765e8-88bd-4e12-af63-d25a98765432"
                  user_id: 1
                  total_amount: 899.99
                  status: delivered
                  created_at: "2023-10-25T14:20:00.000Z"
                  updated_at: "2023-10-26T09:15:00.000Z"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to fetch orders

  /orders/{id}/status:
    patch:
      tags: [Orders]
      summary: Update order status
      description: Update order status. **Admin only**.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Order ID (UUID format)
          example: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdate'
            example:
              status: shipped
      responses:
        200:
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatusResponse'
              example:
                message: Order status updated
                order:
                  id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                  status: shipped
                  updated_at: "2023-10-26T11:45:00.000Z"
        400:
          description: Invalid status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Invalid status
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Order not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to update order status

  /orders/{id}:
    delete:
      tags: [Orders]
      summary: Delete order
      description: Delete an order and its items. **Admin only**.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Order ID (UUID format)
          example: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
      responses:
        200:
          description: Order deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDeleteResponse'
              example:
                message: Order deleted successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Order not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to delete order

  # ==================== ORDER ITEMS ROUTES (NEW) ====================
  /order-items:
    get:
      tags: [OrderItems]
      summary: Get all order items
      description: |
        **Role-based access:**
        - **Admin**: Gets all order items with order & user details
        - **User**: Gets only their own order items
      security:
        - BearerAuth: []
      responses:
        200:
          description: Order items retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemsResponse'
              examples:
                adminResponse:
                  summary: Admin view - All order items
                  value:
                    - id: "e8a765f8-99bd-5d20-bf65-e25b71d8974b"
                      order_id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                      product_id: 1
                      quantity: 2
                      price: 999.99
                      created_at: "2023-10-26T10:30:00.000Z"
                      order_status: pending
                      user_email: john@example.com
                      product_name: iPhone 15 Pro
                    - id: "f9b876g9-10ce-6e31-cg76-f36c82e9085c"
                      order_id: "a8c765e8-88bd-4e12-af63-d25a98765432"
                      product_id: 2
                      quantity: 1
                      price: 899.99
                      created_at: "2023-10-25T14:20:00.000Z"
                      order_status: delivered
                      user_email: jane@example.com
                      product_name: Samsung Galaxy S23
                userResponse:
                  summary: User view - Own order items
                  value:
                    - id: "e8a765f8-99bd-5d20-bf65-e25b71d8974b"
                      order_id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                      product_id: 1
                      quantity: 2
                      price: 999.99
                      created_at: "2023-10-26T10:30:00.000Z"
                      order_status: pending
                      product_name: iPhone 15 Pro
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to fetch order items

  /orders/{orderId}/items:
    get:
      tags: [OrderItems]
      summary: Get order items by order ID
      description: |
        Get items for a specific order.
        - **Admin**: Can view any order
        - **User**: Can only view their own orders
      security:
        - BearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: Order ID (UUID format)
          example: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
      responses:
        200:
          description: Order items retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderWithItems'
              example:
                order:
                  id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                  user_id: 1
                  total_amount: 1999.98
                  status: pending
                  created_at: "2023-10-26T10:30:00.000Z"
                  updated_at: "2023-10-26T10:30:00.000Z"
                items:
                  - id: "e8a765f8-99bd-5d20-bf65-e25b71d8974b"
                    order_id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                    product_id: 1
                    quantity: 2
                    price: 999.99
                    product_name: iPhone 15 Pro
                  - id: "f9b876g9-10ce-6e31-cg76-f36c82e9085c"
                    order_id: "d9b994f7-99ac-4c19-bd54-c14b60c8973a"
                    product_id: 2
                    quantity: 1
                    price: 899.99
                    product_name: Samsung Galaxy S23
        403:
          description: Forbidden - Cannot access this order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Forbidden
        404:
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Order not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to fetch order items

  /order-items/{id}:
    delete:
      tags: [OrderItems]
      summary: Delete order item
      description: Delete a specific order item. **Admin only**.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Order item ID (UUID format)
          example: "e8a765f8-99bd-5d20-bf65-e25b71d8974b"
      responses:
        200:
          description: Order item deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItemsDeleteResponse'
              example:
                message: Order item deleted successfully
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Order item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                message: Order item not found
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: Failed to delete order item

  # ==================== GOOGLE OAUTH ROUTES ====================
  /auth/google:
    get:
      tags: [Authentication]
      summary: Google OAuth login
      description: |
        **Redirects to Google OAuth consent screen.**
        
        ⚠️ **Important:** This endpoint should be accessed directly in browser, not through Swagger UI.
      responses:
        302:
          description: Redirect to Google OAuth
          headers:
            Location:
              schema:
                type: string

  /auth/google/callback:
    get:
      tags: [Authentication]
      summary: Google OAuth callback
      description: Google OAuth callback endpoint. Returns JWT token.
      responses:
        200:
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
              example:
                message: Welcome John Doe from googleAuth
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...